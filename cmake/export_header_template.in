/**
 * Custom generated header according to this library's build configuration.
 * Exported public functions in this library are declared like so:
 *
 * @uppercaseTargetName@_PUBLIC(int) MyExportedFunction(int in);
 */

#ifndef @uppercaseTargetName@_EXPORT_H
#define @uppercaseTargetName@_EXPORT_H

////////////////////////////////////////////
// Extern c
////////////////////////////////////////////

#ifdef __cplusplus
// C++ needs extern C annotation
#	define @uppercaseTargetName@_EXTERNC extern "C"
#else
// C does not need this annotation
#	define @uppercaseTargetName@_EXTERNC
#endif // __cplusplus

#ifdef _WIN32

////////////////////////////////////////////
// Begin Windows
////////////////////////////////////////////

// Windows supports specifying the cdecl calling convention
#	define @uppercaseTargetName@_CDECL __cdecl

#	ifdef @uppercaseTargetName@_PRODUCER
		// Shared library is being built, so mark functions for export
# 		define @uppercaseTargetName@_EXPORT __declspec(dllexport)
#	else
		// Shared library is being used, so mark functions for import
#		define @uppercaseTargetName@_EXPORT __declspec(dllimport)
#	endif // @uppercaseTargetName@_PRODUCER

////////////////////////////////////////////
// End Windows
////////////////////////////////////////////

#else

////////////////////////////////////////////
// Begin Linux
////////////////////////////////////////////

// Not on Windows, so cdecl is not required
#	define @uppercaseTargetName@_CDECL

	// Shared library is being built, so mark exported functions as visible
#	define @uppercaseTargetName@_EXPORT __attribute__((visibility("default")))

////////////////////////////////////////////
// End Linux
////////////////////////////////////////////

#endif // _WIN32

// Now combine all of these switches into a macro that exposes a function in the library's public API:
#define @uppercaseTargetName@_PUBLIC(returnType) @uppercaseTargetName@_EXTERNC @uppercaseTargetName@_EXPORT returnType @uppercaseTargetName@_CDECL

#endif // @uppercaseTargetName@_EXPORT_H
